getwd()
library(tidyverse)
library(dplyr)
df <- read_csv("./Super final/orders_train_allvars.csv")
library(tidyverse)
library(dplyr)
df <- read_csv("./Super_final/orders_train_allvars.csv")
library(tidyverse)
library(dplyr)
df <- read_csv("./orders_train_allvars.csv")
View(df)
library(tidyverse)
library(dplyr)
df <- read_csv("./orders_train_allvars.csv")
insta<-df%>%
select(reordered, add_to_cart_order, order_dow, order_hour_of_day, product_name, aisle, department)
View(insta)
insta%>%
unique(department)
unique(insta)
insta<-df%>%
select(reordered, add_to_cart_order, order_dow, order_hour_of_day, product_name, aisle, department, days_since_prior_order)
library(tidyverse)
library(dplyr)
df <- read_csv("./orders_train_allvars.csv")
insta %>% summarise_all(funs(n_distinct(.)))
insta %>% summarise_all(list(~n_distinct(.)))
library(tidyverse)
library(dplyr)
df <- read_csv("./orders_train_allvars.csv")
# library
library(treemap)
install.packages("treemap")
install.packages("d3Tree")
# library
library(treemap)
library(d3treeR)
devtools::install_github("timelyportfolio/d3treeR@experiment/bostock")
# library
library(treemap)
library(d3treeR)
devtools::install_github("timelyportfolio/d3treeR@experiment/bostock")
# library
library(treemap)
library(d3treeR)
devtools::install_github
devtools::install_github("gluc/data.tree")
devtools::install_github("mtennekes/treemap")
devtools::install_github("timelyportfolio/d3treeR")
install.Rtools
install.Rtools()
library(tidyverse)
library(dplyr)
df <- read_csv("./orders_train_allvars.csv")
# library
library(treemap)
library(d3treeR)
# dataset
group=c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup=paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value=c(13,5,22,12,11,7,3,1,23)
data=data.frame(group,subgroup,value)
# basic treemap
p=treemap(data,
index=c("group","subgroup"),
vSize="value",
type="index"
)
# make it interactive ("rootname" becomes the title of the plot):
inter=d3tree2( p ,  rootname = "General" )
devtools::install_github("timelyportfolio/d3treeR")
library(treemap)
library(d3treeR)
devtools::install_github("timelyportfolio/d3treeR")
force=TRUE
'force=TRUE'
force=TRUE
# library
library(treemap)
library(d3treeR)
# dataset
group=c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup=paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value=c(13,5,22,12,11,7,3,1,23)
data=data.frame(group,subgroup,value)
# basic treemap
p=treemap(data,
index=c("group","subgroup"),
vSize="value",
type="index"
)
# make it interactive ("rootname" becomes the title of the plot):
inter=d3tree2( p ,  rootname = "General" )
?d3treeR
??d3treeR
# library
library(treemap)
library(d3treeR)
# have a look at htmlwidgets gallery star count tree map
widget_gh = jsonlite::fromJSON("https://rawgit.com/hafen/htmlwidgetsgallery/gh-pages/github_meta.json")
widget_yaml = yaml::yaml.load_file("https://rawgit.com/hafen/htmlwidgetsgallery/gh-pages/_config.yml")
lapply(
names(widget_gh)
,function(w){
widget = NULL
widget = Filter(function(x){x$"name" == strsplit(w,"_")[[1]][2]}, widget_yaml$widgets)
if( !is.null(widget) && length(widget) >0 ){
widget = widget[[1]]
data.frame(
author = widget$ghauthor
,widget = widget$name
#,cran = paste0("CRAN = ",!is.null(widget$cran))
,stars = widget_gh[[w]]$stargazers_count
,forks = widget_gh[[w]]$forks_count
,stringsAsFactors = FALSE
)
}
}
) %>%
bind_rows %>%
treemap(
index = c("author","widget")
,vSize = "stars"
,vColor = "stars"
,type = "value"
,fun.aggregate = "weighted.mean"
) %>%
d3tree2( rootname = "htmlwidgets" )
# library
library(treemap)
library(d3treeR)
# dataset
group=c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup=paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value=c(13,5,22,12,11,7,3,1,23)
data=data.frame(group,subgroup,value)
treemap(data,
index = c("group","subgroup")
,vSize = "value"
,type = "index"
,fun.aggregate = "weighted.mean"
) %>%
d3tree2( rootname = "General" )
# we'll need the development version of data.tree. If you do not have, install it
#devtools::install_github("gluc/data.tree")
#devtools::install_github("timelyportfolio/d3treeR")
library(tidyverse)
library(dplyr)
library(treemap)
library(d3treeR)
insta%>%
select(add_to_cart_order)%>%
group_by(add_to_cart_order)%>%
count(add_to_cart_order)
insta%>%
select(department)%>%
filter(department=="missing")%>%
count(department)
insta%>%
select(aisle)%>%
filter(aisle=="missing")%>%
count(aisle)
insta[!(insta$department=="missing"),]
insta%>%
insta[!(insta$department=="missing"),]
insta%>%
[!(insta$department=="missing"),]
insta<-insta[!(insta$department=="missing"),]
View(insta)
insta<-insta[!(insta$department=="missing"),]
insta$order_hour_of_day[insta$order_hour_of_day<=6 & insta$order_hour_of_day>=12]="Morning"
insta<-insta[!(insta$department=="missing"),]
insta$order_hour_of_day[insta$order_hour_of_day<=6 & insta$order_hour_of_day>=12]="Morning"
# we'll need the development version of data.tree. If you do not have, install it
#devtools::install_github("gluc/data.tree")
#devtools::install_github("timelyportfolio/d3treeR")
library(tidyverse)
library(dplyr)
library(treemap)
library(d3treeR)
insta<-insta[!(insta$department=="missing"),]
insta$order_hour_of_day[insta$order_hour_of_day<=6 & insta$order_hour_of_day>=12]="Morning"
insta
View(insta)
insta<-insta[!(insta$department=="missing"),]
insta
insta<-insta[!(insta$department=="missing"),]
View(insta)
insta<-insta[!(insta$department=="missing"),]
insta$order_hour_of_day[insta$order_hour_of_day == (6:12)] <- "mornings"
insta<-insta[!(insta$department=="missing"),]
insta$order_hour_of_day[insta$order_hour_of_day == (6:12)] <- "mornings"
View(insta)
insta<-insta[!(insta$department=="missing"),]
#read/import the file  that we use
df <- read_csv("./orders_train_allvars.csv")
#Selecting only the columns We need to use for this project. Keep in mind we are using train dataset.
insta<-df%>%
select(reordered, add_to_cart_order, order_dow, order_hour_of_day, product_name, aisle, department, days_since_prior_order)
#counting how many unique values each column has
insta %>% summarise_all(list(~n_distinct(.)))
insta<-insta[!(insta$department=="missing"),]
View(insta)
insta<-insta[!(insta$department=="missing"),]
insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6)
View(insta)
insta<-insta[!(insta$department=="missing"),]
insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6 & order_hour_of_day>0)
insta<-insta[!(insta$department=="missing"),]
insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6 & order_hour_of_day>0)
insta$order_hour_of_day[insta$order_hour_of_day>1 & insta$order_hour_of_day<=6]<-"M"
insta<-insta[!(insta$department=="missing"),]
insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6 & order_hour_of_day>0)
insta<-insta$order_hour_of_day[insta$order_hour_of_day>1 & insta$order_hour_of_day<=6]<-"M"
# we'll need the development version of data.tree. If you do not have, install it
#devtools::install_github("gluc/data.tree")
#devtools::install_github("timelyportfolio/d3treeR")
library(tidyverse)
library(dplyr)
library(treemap)
library(d3treeR)
#Selecting only the columns We need to use for this project. Keep in mind we are using train dataset.
insta<-df%>%
select(reordered, add_to_cart_order, order_dow, order_hour_of_day, product_name, aisle, department, days_since_prior_order)
# we'll need the development version of data.tree. If you do not have, install it
#devtools::install_github("gluc/data.tree")
#devtools::install_github("timelyportfolio/d3treeR")
library(tidyverse)
library(dplyr)
library(treemap)
library(d3treeR)
#read/import the file  that we use
df <- read_csv("./orders_train_allvars.csv")
#Selecting only the columns We need to use for this project. Keep in mind we are using train dataset.
insta<-df%>%
select(reordered, add_to_cart_order, order_dow, order_hour_of_day, product_name, aisle, department, days_since_prior_order)
#counting how many unique values each column has
insta %>% summarise_all(list(~n_distinct(.)))
insta<-insta[!(insta$department=="missing"),]
insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6 & order_hour_of_day>0)
# library
library(treemap)
library(d3treeR)
# dataset
group=c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup=paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value=c(13,5,22,12,11,7,3,1,23)
data=data.frame(group,subgroup,value)
treemap(data,
index = c("group","subgroup")
,vSize = "value"
,type = "index"
,fun.aggregate = "weighted.mean"
) %>%
d3tree2( rootname = "General" )
View(insta)
insta<-insta[!(insta$department=="missing"),]
insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6 & order_hour_of_day>0)%>%
ifelse(order_hour_of_day >=1 & order_hour_of_day <= 6, 'INTRON')
insta<-insta[!(insta$department=="missing"),]
insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6 & order_hour_of_day>0)
insta$order_hour_of_day<-ifelse(order_hour_of_day >=1 & order_hour_of_day <= 6, 'INTRON')
insta<-insta[!(insta$department=="missing"),]
insta$order_hour_of_day<-ifelse(order_hour_of_day >=1 & order_hour_of_day <= 6, 'INTRON')
insta<-insta[!(insta$department=="missing"),]
d$status <- ifelse(d$position >= 1000 & d$position <= 10200, 'INTRON')
insta$order_hour_of_day <- ifelse(d$position >= 1000 & d$position <= 10200, 'INTRON')
insta$order_hour_of_day <- ifelse(insta$position >= 1000 & insta$position <= 10200, 'INTRON')
insta$order_hour_of_day <- ifelse(insta$order_hour_of_day >= 0 & insta$order_hour_of_day <=6, 'INTRON')
q<-insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6)
View(q)
q<-insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6)
q$order_hour_of_day <- ifelse(q$order_hour_of_day >= 0 & q$order_hour_of_day <=6, 'INTRON', NA)
q<-insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6)
q$order_hour_of_day <- ifelse(q$order_hour_of_day >= 0 & q$order_hour_of_day <6, 'INTRON', NA)
q<-insta%>%
select(order_hour_of_day)%>%
filter(order_hour_of_day<=6)
q$order_hour_of_day <- ifelse(q$order_hour_of_day >= 0 & q$order_hour_of_day <6, 'INTRON', 6)
View(q)
# we'll need the development version of data.tree. If you do not have, install it
#devtools::install_github("gluc/data.tree")
#devtools::install_github("timelyportfolio/d3treeR")
library(tidyverse)
library(dplyr)
library(treemap)
library(d3treeR)
#read/import the file  that we use
df <- read_csv("./orders_train_allvars.csv")
#Selecting only the columns We need to use for this project. Keep in mind we are using train dataset.
insta<-df%>%
select(reordered, add_to_cart_order, order_dow, order_hour_of_day, product_name, aisle, department, days_since_prior_order)
#counting how many unique values each column has
insta %>% summarise_all(list(~n_distinct(.)))
#here I am removing missing department values which does not make sense
insta<-insta[!(insta$department=="missing"),]
#here I am encoding/recoding values of order hour to the categories (I am subsetting them) so that it is more efficient
insta$order_hour_of_day <-
ifelse(insta$order_hour_of_day >= 0 & insta$order_hour_of_day <7, 'Night',
ifelse(insta$order_hour_of_day >= 7 & insta$order_hour_of_day <13, 'Morning',
ifelse(insta$order_hour_of_day >= 13 & insta$order_hour_of_day <19, 'Afternoon',
ifelse(insta$order_hour_of_day >= 19 & insta$order_hour_of_day <=23, 'Evening', NA))))
#Here I am replacing cart priority ordering with sub categories so that improve efficiency later on when drawing graphs.
insta$add_to_cart_order <-
ifelse(insta$add_to_cart_order >= 1 & insta$add_to_cart_order <=4, 'Highest',
ifelse(insta$add_to_cart_order >= 5 & insta$add_to_cart_order <=10, 'High',
ifelse(insta$add_to_cart_order >= 11 & insta$add_to_cart_order <18, 'Medium',
ifelse(insta$add_to_cart_order >= 18 & insta$add_to_cart_order <25, 'Low',
ifelse(insta$add_to_cart_order >= 25, 'Lowest', NA      )))))
#Here I am changing days of the week from numeric to string/ character
insta$order_dow <-
ifelse(insta$order_dow == 0 , 'Sat',
ifelse(insta$order_dow == 1 , 'Sun',
ifelse(insta$order_dow == 2 , 'Mon',
ifelse(insta$order_dow == 3 , 'Tue',
ifelse(insta$order_dow == 4,  'Wed',
ifelse(insta$order_dow == 5,  'Thur',
ifelse(insta$order_dow == 6,  'Fri', NA)))))))
# library
library(treemap)
library(d3treeR)
# dataset
group=c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup=paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value=c(13,5,22,12,11,7,3,1,23)
data=data.frame(group,subgroup,value)
treemap(data,
index = c("group","subgroup")
,vSize = "value"
,type = "index"
,fun.aggregate = "weighted.mean"
) %>%
d3tree2( rootname = "General" )
